package app

import "args"
import "cx"
import "fps"
import "glfw"
import "gfx"
import "gui"
import "os"
import "mat"
import "snd"
import "v2"
import "v4"

// TODO : handle position in options
// TODO : handle fullscreen in options

// Globals ...
var g_app Application
var fakeExit f64 // TODO : REMOVE

// Constants ...
var APP_HINT_NONE i32       = 0
var APP_HINT_DEBUG i32      = 1
var APP_HINT_FULLSCREEN i32 = 2
var APP_HINT_RESIZABLE i32  = 4

// Options ...
type Options struct {
	width i32
	height i32
	fps i32
    glVersion str
	hints i32
	dataDir str
}

// Application ...
type Application struct {
	options Options
	exit bool
    visible bool
	name str
	window str
	major i32
	minor i32
    glVersion i32
    x i32
	y i32
	width i32
	height i32
	xscale f32
	yscale f32
	xy_scale mat.v2
	xyxy_scale mat.v4
	fullscreen bool

    prfSwap fps.ProfileId
    prfFrame fps.ProfileId
    prfUpdate fps.ProfileId
    prfSound fps.ProfileId
    prfUIUpdate fps.ProfileId
    prfUIResize fps.ProfileId
    prfRender fps.ProfileId

    hasOnParse i32 // TODO : issues with bool
    currentArgIsValid i32 // TODO : issues with bool
    currentArg str
    userHelp str
    onParse func_i32_i32_id
}

// Help ...
func Help(message str, exitCode i32) {
	printf(message)
	printf("\nUsage:\n")
	printf("++help      : Prints this message.\n")
	printf("++width     : Width in pixels\n")
	printf("++height    : Height in pixels\n")
	printf("++fps       : Target framerate, vsyng disabled when >= 0\n")
	printf("++hints     : Window hint flags (fullscreen, resizable)\n")
	printf("++data      : Resource path\n")
	printf("++glVersion : Select opengl version\n")
    if len(g_app.userHelp) > 0 {
        printf(g_app.userHelp)
    }
    os.Exit(exitCode)
}

// Run ...
func Run(name str, width i32, height i32, fps i32, dataDir str, glVersion i32, fpsUpdate ui32) (success bool) {
    g_app.options.width = width
    g_app.options.height = height
    g_app.options.fps = fps
    g_app.options.dataDir = dataDir
    g_app.options.glVersion = gfx.GetGLVersionToString(glVersion)

    parse()

	g_app.exit = false
	g_app.window = name
	g_app.name = name
    g_app.glVersion = gfx.GetGLVersionFromString(g_app.options.glVersion)
    printf("OpenGL Version :  %d, '%s'\n", g_app.glVersion, g_app.options.glVersion)

    if g_app.glVersion == gfx.GL_VERSION_DS_3_2 {
        g_app.major = 3
        g_app.minor = 2
    } else if g_app.glVersion == gfx.GL_VERSION_ES_3_1 {
        g_app.major = 3
        g_app.minor = 1
    } else {
        success = false
        return
    }
    fps.Init(i32.ui32(Fps()))

    //SetStartCallback("app", "StartCallback")
    SetStopCallback("app", "StopCallback")

    g_app.prfSwap = fps.CreateProfile("swap")
    g_app.prfFrame = fps.CreateProfile("frame")
    g_app.prfUpdate = fps.CreateProfile("update")
    g_app.prfSound = fps.CreateProfile("sound")
    g_app.prfUIUpdate = fps.CreateProfile("ui update")
    g_app.prfUIResize = fps.CreateProfile("ui resize")
    g_app.prfRender = fps.CreateProfile("render")

    for Running()  && (fakeExit < 60.0D) {
        fps.BeginUpdate(fpsUpdate)
        glfw.PollEvents()
        if Visible() {
            fps.StartProfile(g_app.prfSwap)
            {
            	glfw.MakeContextCurrent(g_app.window)
                fps.StartProfile(g_app.prfFrame)
                {
                    // Update ...
                    fps.StartProfile(g_app.prfUpdate)
                    {
                        fps.StartProfile(g_app.prfSound)
                        snd.Update()
                        fps.StopProfile(g_app.prfSound)

                        fps.StartProfile(g_app.prfUIUpdate)
                        //fakeExit = fakeExit + fps.DeltaSecond()
                        gui.Update(fps.DeltaSecond())
                        fps.StopProfile(g_app.prfUIUpdate)

                        fps.StartProfile(g_app.prfUIResize)
                        gui.Resize()
                        fps.StopProfile(g_app.prfUIResize)
                    }
                    fps.StopProfile(g_app.prfUpdate)

                    // Render ...
                    fps.StartProfile(g_app.prfRender)
                    gui.Render()
                    fps.StopProfile(g_app.prfRender)
                }
                fps.StopProfile(g_app.prfFrame)
	            glfw.SwapBuffers(g_app.window)
            }
            fps.StopProfile(g_app.prfSwap)
        }
        fps.EndUpdate()
    }
}

// Width ...
func Width()(out i32) {
	out = g_app.width
}

// Height ...
func Height()(out i32) {
	out = g_app.height
}

// ScaleX ...
func ScaleX()(out f32) {
	out = g_app.xscale
}

// ScaleY ...
func ScaleY()(out f32) {
	out = g_app.yscale
}

// ScaleXY ...
func ScaleXY()(out v2) {
	out = g_app.xy_scale
}

// ScaleXYXY ...
func ScaleXYXY()(out v4) {
	out = g_app.xyxy_scale
}

// DataDir ...
func DataDir()(out str) {
	out = g_app.options.dataDir
}

// Fps ...
func Fps()(out i32) {
	out = g_app.options.fps
}

// GLVersion ...
func GLVersion()(out i32) {
    out = g_app.glVersion
}

// Name ...
func Name()(out str) {
	out = g_app.name
}

// WindowName ...
func WindowName()(out str) {
	out = g_app.window
}

// Exit ...
func Exit() {
	printf("exiting %s...\n", g_app.name)
	g_app.exit = true
}

// ToggleFullscreen ...
func ToggleFullscreen() {
	var fullscreen bool = g_app.fullscreen == false
	if fullscreen {
		g_app.fullscreen = fullscreen
	}
	glfw.Fullscreen(g_app.window, fullscreen, g_app.x, g_app.y, g_app.options.width, g_app.options.height)
	g_app.fullscreen = fullscreen
}

// Running ...
func Running()(out bool) { // ISSUE : member function does not contain expressions
    if Visible() {
	out = (glfw.ShouldClose(g_app.window) == false && g_app.exit == false)
    } else {
    out = true
    }
}

// Visible ...
func Visible() (out bool) {
    out = g_app.visible
}

// Resize ...
func Resize(width i32, height i32) {
	/*if g_app.fullscreen == false {
		g_app.options.width = width
		g_app.options.height = height
	}*/

	g_app.width = width
	g_app.height = height
}

// Destroy ...
func Destroy()() {
	glfw.MakeContextCurrent(g_app.window)
    snd.Destroy()
    gfx.Destroy()
}

// SetParseCallback ...
func SetParseCallback(packageName str, functionName str) {
    g_app.hasOnParse = 0
    var onParse func_i32_i32_id = func_i32_i32(packageName, functionName)
    panicIfNot(onParse.index >= 0, "invalid function")
    if onParse.index >= 0 {
        g_app.onParse = onParse
        g_app.hasOnParse = 1
    }
}

// SetUserHelp ...
func SetUserHelp(message str) {
    g_app.userHelp = message
}

// GetCurrentArg ...
func GetCurrentArg() (out str) {
    out = g_app.currentArg
}

// SetCurrentArgIsValid ...
func SetCurrentArgIsValid(value i32) {
    g_app.currentArgIsValid = value
}

// SetStartCallback ...
func SetStartCallback(packageName str, functionName str) {
    glfw.SetStartCallback(g_app.window, functionName, packageName)
}

// SetStopCallback ...
func SetStopCallback(packageName str, functionName str) {
    glfw.SetStopCallback(g_app.window, functionName, packageName)
}

// SetKeyboardCallback ...
func SetKeyboardCallback(packageName str, functionName str) {
	glfw.SetKeyboardCallback(g_app.window, functionName, packageName)
}

// SetMouseCallback ...
func SetMouseCallback(packageName str, functionName str) {
	glfw.SetMouseCallback(g_app.window, functionName, packageName)
}

// SetFramebufferResizeCallback ...
func SetFramebufferResizeCallback(packageName str, functionName str) {
	glfw.SetFramebufferSizeCallback(g_app.window, functionName, packageName)
}

// SetWindowResizeCallback ...
func SetWindowResizeCallback(packageName str, functionName str) {
	glfw.SetWindowSizeCallback(g_app.window, functionName, packageName)
}

// SetWindowPositionCallback ...
func SetWindowPositionCallback(packageName str, functionName str) {
    glfw.SetWindowPosCallback(g_app.window, functionName, packageName)
}

func parse() {
	var argc i32 = len(os.Args) // ISSUE : doubious compilation error : function 'len' expected receiving variable of type 'i32'; 'str' was provided

	// >> tmp issue #214
	var width i32
	var height i32
	var fps i32
	var hints i32
	var dataDir str
	var help bool
	var glVersion str
    // << tmp issue #214

	var helpMatch bool
	var widthMatch bool
	var heightMatch bool
	var fpsMatch bool
	var hintsMatch bool
	var dataDirMatch bool
    var glVersionMatch bool

	var hintNames []str
	hintNames = []str {"fullscreen", "resizable" }
	var hintValues []i32
	hintValues = []i32 {APP_HINT_FULLSCREEN, APP_HINT_RESIZABLE}

	for a := 0; a < argc; a++ {
		arg := os.Args[a]
		if args.Bool(arg, "help", &help, &helpMatch) {
			Help("", 0)
		}

		if args.I32(arg, "width", &width, &widthMatch) {
			if (width < 0 || width > 65536) {
				 Help(sprintf("invalid value %s\n", arg), cx.PANIC)
			}
			g_app.options.width = width
			continue
		}

		if args.I32(arg, "height", &height, &heightMatch) {
			if (height < 0 || height > 65536) {
				 Help(sprintf("invalid value %s\n", arg), cx.PANIC)
			}
			g_app.options.height = height
			continue
		}

		if args.I32(arg, "fps", &fps, &fpsMatch) {
			if (fps < 0 || fps > 65536) {
				 Help(sprintf("invalid value %s\n", arg), cx.PANIC)
			}
			g_app.options.fps = fps
			continue
		}

		if args.Str(arg, "data", &dataDir, &dataDirMatch) {
			g_app.options.dataDir = dataDir
			continue
		}

        if args.Str(arg, "glVersion", &glVersion, &glVersionMatch) {
            g_app.options.glVersion = glVersion
		    if gfx.GetGLVersionFromString(glVersion) == gfx.GL_VERSION_NONE {
                Help(sprintf("invalid value %s\n", arg), cx.PANIC)
            }
            continue
        }

		if args.Flags(arg, "hints", &hints, &hintsMatch, hintNames, hintValues) {
			g_app.options.hints = hints
			continue
		}

        if g_app.hasOnParse == 1 {
            g_app.currentArg = arg
            call_i32_i32(g_app.onParse, a, argc)
            if g_app.currentArgIsValid  == 1{
                continue
            }
        }

		Help(sprintf("invalid argument %s", arg), cx.ASSERT)
	}
}

func Init() {
    g_app.visible = true
	printf("app start : %s...\n", g_app.name)

	glfw.Init() // ##0 terminate

    var resizable i32 = glfw.False
	if (g_app.options.hints & APP_HINT_RESIZABLE) == APP_HINT_RESIZABLE {
		resizable = glfw.True
	}

	glfw.WindowHint(glfw.Resizable, resizable)
	glfw.WindowHint(glfw.OpenGLForwardCompat, 1)
	glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)
	glfw.WindowHint(glfw.ContextVersionMajor, g_app.major)
	glfw.WindowHint(glfw.ContextVersionMinor, g_app.minor)
	//glfw.WindowHint(glfw.CocoaRetinaFramebuffer, glfw.True)
	//glfw.WindowHint(glfw.ScaleToMonitor, glfw.True)

	var xscale f32
	var yscale f32
	xscale, yscale = glfw.GetMonitorContentScale()

	g_app.xscale = xscale
	g_app.yscale = yscale
	g_app.xy_scale = v2.make(xscale, yscale)
	g_app.xyxy_scale = v4.make(xscale, yscale, xscale, yscale)

	var windowWidth i32 = f32.i32(i32.f32(g_app.options.width) / xscale)
	var windowHeight i32 = f32.i32(i32.f32(g_app.options.height) / yscale)

	glfw.CreateWindow(g_app.window, windowWidth, windowHeight, g_app.name)
	glfw.MakeContextCurrent(g_app.window)

	g_app.x, g_app.y = glfw.GetWindowPos(g_app.window)
	g_app.width, g_app.height = glfw.GetFramebufferSize(g_app.window)
    //g_app.width = g_app.width / 2
    //g_app.height = g_app.height / 2
    //g_app.width = g_app.options.width
    //g_app.height = g_app.options.height

	var swapInterval i32 = 0
	if g_app.options.fps > 0 {
		swapInterval = 1 // should be based on targetFps
	}

	glfw.SwapInterval(swapInterval)

	if (g_app.options.hints & APP_HINT_FULLSCREEN) == APP_HINT_FULLSCREEN {
		ToggleFullscreen()
	}

    SetFramebufferResizeCallback("app", "FramebufferResizeCallback")
    SetWindowResizeCallback("app", "WindowResizeCallback")
    SetWindowPositionCallback("app","WindowPositionCallback")


    gfx.Init(Width(), Height(), DataDir(), GLVersion())
    gui.Init(Width(), Height(), DataDir())
    snd.Init(64, 64)

    g_app.visible = true
}

func stopCallback() {
    printf("app stop...\n")
}

func StartCallback(window str) {
    Init()
}

func StopCallback(window str) {
}

func FramebufferResizeCallback(window str, width i32, height i32) {
	printf("------------------------->>>>> FramebufferResizeCallback %s, %d, %d\n", window, width, height)
	gfx.Resize(width, height)
}

func WindowResizeCallback(window str, width i32, height i32) {
	printf("------------------------->>>>> WindowResizeCallback %s, %d, %d\n", window, width, height)
	/*app.Resize(width, height)
	gfx.Resize(width * 2, height * 2)*/
	if g_app.fullscreen == false {
		g_app.options.width = width
		g_app.options.height = height
	}
}

func WindowPositionCallback(window str, x i32, y i32) {
	if g_app.fullscreen == false {
		g_app.x = x
		g_app.y = y
	}
}


